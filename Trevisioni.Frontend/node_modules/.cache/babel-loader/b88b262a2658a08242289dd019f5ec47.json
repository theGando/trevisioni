{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miche\\\\source\\\\repos\\\\trevisioni-1\\\\src\\\\Comps\\\\adArtistList.tsx\";\nimport * as React from 'react';\nimport { Button } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'id',\n  headerName: 'ID',\n  width: 70\n}, {\n  field: 'artistName',\n  headerName: 'Artist Name',\n  width: 160\n}, {\n  field: 'artistType',\n  headerName: 'Artist Type',\n  width: 160\n}, {\n  field: 'activityName',\n  headerName: 'Activity Name',\n  width: 160\n}, {\n  field: 'artistPhone',\n  headerName: 'Artist Phone',\n  width: 160\n}, {\n  field: 'artistEmail',\n  headerName: 'Artist Email',\n  width: 160\n}, {\n  field: 'artistPage',\n  headerName: 'Artist Page',\n  width: 160,\n  renderCell: params => {\n    const onPageClick = () => {\n      const api = params.api;\n      const fields = api.getAllColumns().map(c => c.field).filter(c => c !== \"__check__\" && !!c);\n      const thisRow = {};\n      fields.forEach(f => {\n        thisRow[f] = params.getValue(params.id, f);\n      });\n      return alert(JSON.stringify(\"Artist Page\"));\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"medium\",\n        style: {\n          marginLeft: 12,\n          backgroundColor: 'blue'\n        },\n        onClick: onPageClick,\n        children: \"Artist Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this);\n  }\n}];\nconst rows = [{\n  id: 1,\n  artistName: 'Riff',\n  artistType: 'Performer',\n  activityName: 'Concert'\n}, {\n  id: 2,\n  artistName: 'Baffo',\n  artistType: 'Performer',\n  activityName: 'Poetry Reading'\n}, {\n  id: 3\n}, {\n  id: 4\n}, {\n  id: 5\n}, {\n  id: 6\n}, {\n  id: 7\n}, {\n  id: 8\n}, {\n  id: 9\n}];\n\nfunction ArtistList() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ArtistList;\nexport default ArtistList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArtistList\");","map":{"version":3,"sources":["C:/Users/Miche/source/repos/trevisioni-1/src/Comps/adArtistList.tsx"],"names":["React","Button","DataGrid","columns","field","headerName","width","renderCell","params","onPageClick","api","fields","getAllColumns","map","c","filter","thisRow","forEach","f","getValue","id","alert","JSON","stringify","marginLeft","backgroundColor","rows","artistName","artistType","activityName","ArtistList","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { DataGrid, GridApi, GridCellParams, GridCellValue } from '@material-ui/data-grid';\r\n\r\nconst columns = [\r\n    { field: 'id', headerName: 'ID', width: 70 },\r\n    { field: 'artistName', headerName: 'Artist Name', width: 160 },\r\n    { field: 'artistType', headerName: 'Artist Type', width: 160 },\r\n    { field: 'activityName', headerName: 'Activity Name', width: 160 },\r\n    { field: 'artistPhone', headerName: 'Artist Phone', width: 160 },\r\n    { field: 'artistEmail', headerName: 'Artist Email', width: 160 },\r\n    {\r\n        field: 'artistPage',\r\n        headerName: 'Artist Page',\r\n        width: 160,\r\n        renderCell: (params: GridCellParams) => {\r\n            const onPageClick = () => {\r\n                const api: GridApi = params.api;\r\n                const fields = api\r\n                    .getAllColumns()\r\n                    .map((c) => c.field)\r\n                    .filter((c) => c !== \"__check__\" && !!c);\r\n                const thisRow: Record<string, GridCellValue> = {};\r\n                fields.forEach((f) => {\r\n                    thisRow[f] = params.getValue(params.id, f);\r\n                });\r\n                return alert(JSON.stringify(\"Artist Page\"));\r\n            };\r\n            return (\r\n                <strong>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"medium\"\r\n                        style={{ marginLeft: 12, backgroundColor: 'blue' }}\r\n                        onClick={onPageClick}\r\n                    >\r\n                        Artist Name\r\n                    </Button>\r\n                </strong>\r\n            );\r\n        }\r\n    },\r\n]\r\nconst rows = [\r\n    { id: 1, artistName: 'Riff', artistType: 'Performer', activityName: 'Concert' },\r\n    { id: 2, artistName: 'Baffo', artistType: 'Performer', activityName: 'Poetry Reading' },\r\n    { id: 3 },\r\n    { id: 4 },\r\n    { id: 5 },\r\n    { id: 6 },\r\n    { id: 7 },\r\n    { id: 8 },\r\n    { id: 9 },\r\n];\r\nfunction ArtistList() {\r\n    return (\r\n        <div style={{ height: '100vh', width: '100%' }}>\r\n            <DataGrid rows={rows} columns={columns} pageSize={10} />\r\n        </div>\r\n    )\r\n}\r\nexport default ArtistList;"]},"metadata":{},"sourceType":"module"}